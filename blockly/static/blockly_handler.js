;(function(IPython, $){
"use strict";

var root = this,
    BLOCKLY_DELIM = "## AUTOGENERATED BY BLOCKLY ##\n"+
                    "##### EDIT AT YOUR PERIL #####\n",
    // a map of cell_ids to blockly objects
    workspaces = {},
    // the publicly visible api
    api = root.IPython_Blockly = {
        // used by iframes to register their version of Blockly
        register_workspace: register_workspace
    };

function blockly_handler(json, element){
    // need the cell DOM element first... not sure if i can trust
    // get_selected_cell...
    var cell = get_cell_from_target(element);
        // ids are good... private scope enough?
        // the workspace div... doesn't get used much, actually...
    
    create_workspace(cell, element, json);
}

function get_workspace(cell){
    return workspaces[cell.cell_id];
}

function create_workspace(cell, element, json){
    // returns an iframe
    var workspace_div = $("<div/>")
        .attr("id", IPython.utils.uuid())
        .css("overflow", "hidden")
        .css("height", (json.height || 500) + "px");
        
    element.append(workspace_div);
    
    new_blockly_iframe(cell, workspace_div);
        
    workspaces[cell.cell_id] = {
        inited: false,
        Blockly: null,
        element: workspace_div
    };
    
}

function url_args(window){
    var src_bits = window.location.search.slice(1)
        .split("&"),
        result = {};
    
    for(var i=0; i<src_bits.length; i++){
        var bit = src_bits[i].split("=");
        result[bit[0]] = bit[1];
    } 
    return result;
}

function register_workspace(frame_window, blockly){
    var args = url_args(frame_window),
        cell = IPython.notebook.get_cells().filter(function(c){
            return c.cell_id == args.cell_id;
        })[0],
        ws = workspaces[cell.cell_id];
        
    ws.Blockly = blockly;
    
    if(cell.metadata.blockly === undefined){
        cell.metadata.blockly = {xml: "<xml></xml>"};
    }
    
    ws.Blockly.Xml.domToWorkspace(ws.Blockly.mainWorkspace,
        ws.Blockly.Xml.textToDom(cell.metadata.blockly.xml)
    );
    

    // every time you move a block, update the generated code in the
    // output_cell
    ws.Blockly.bindEvent_(
        ws.Blockly.mainWorkspace.getCanvas(),
        'blocklyWorkspaceChange',
        null,
        on_workspace_change(cell, ws));
}

function new_blockly_iframe(cell, parent_div){
    var iframe = $("<iframe/>", {
            src:'/static/jsplugins/blockly/frame.html?cell_id=' + cell.cell_id,
            style: "width: 100%; height: 100%;"
        });
    
    parent_div.append(iframe);
}

function get_cell_from_target(element){
    // need the cell DOM element first... not sure if i can trust
    // get_selected_cell...
    var cell_element = element.parentsUntil("#notebook").last(),
        // might not need this.. and might keep gc open?
        cells = IPython.notebook.get_cells(),
        // get the idx of the IPython.Cell
        cell_idx = +cells.map(function(c,i){return i;})
            .filter(function(idx){
                // i hate jquery sometimes
                return cells[idx].element.is(cell_element);
            })[0],
        // and the actual cell
        cell = cells[cell_idx];

    return cell;
}

function get_output_cell(cell){
    // need the cell DOM element first... not sure if i can trust
    var cells = IPython.notebook.get_cells(),
        // get the idx of the IPython.Cell
        cell_idx = +cells.map(function(c,i){return i;})
            .filter(function(idx){
                return cells[idx] === cell;
            })[0],
        // where to put the generated code, for now
        output_cell;

    // gotta put this code someplace...
    if(cell.at_bottom() ||                              // but not off the end
        !(cells[cell_idx+1] instanceof IPython.CodeCell) ||   // but only code
        cells[cell_idx+1].get_text().indexOf(BLOCKLY_DELIM) // and only if it belongs to blkly
    ){
        output_cell = IPython.notebook.insert_cell_below("code", cell_idx);
    }else{
        // otherwise it's the next one.
        output_cell = cells[cell_idx+1];
    }

    return output_cell;
}

function on_workspace_change(cell, workspace){
    /*
        probably would get some events... should check it out...
        ideally, it gets the actual workspace what changed (if multiple)
    */
    return function(){
        // getting the output every time, as we have no idea what will
        // happen as people start dinking with stuff
        
        var output_cell = get_output_cell(cell);

        if(cell.metadata.blockly === undefined){
           cell.metadata.blockly = {}; 
        }
        
        var xml = workspace.Blockly.Xml.domToText(
            workspace.Blockly.Xml.workspaceToDom(
                workspace.Blockly.mainWorkspace));
        
        cell.metadata.blockly.xml = xml;
        
        output_cell.set_text(
            BLOCKLY_DELIM +
            workspace.Blockly.Generator.workspaceToCode('Python')
                .trim()
        );
    };
}

IPython.json_handlers.register_handler('blockly', blockly_handler);

}).call(this, IPython, $);