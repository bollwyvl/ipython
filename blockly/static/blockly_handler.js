;(function(IPython, $, Blockly){
"use strict";

var root = this,
    BLOCKLY_DELIM = "## AUTOGENERATED BY BLOCKLY ##\n"+
                    "##### EDIT AT YOUR PERIL #####\n";

function blockly_handler(json, element){
    if(Blockly === null){
        Blockly = root.Blockly;
    }

    // need the cell DOM element first... not sure if i can trust
    // get_selected_cell...
    var cell = get_cell_from_target(element),
        // ids are good... private scope enough?
        id = 'blockly-' + IPython.utils.uuid(),
        // the workspace div... doesn't get used much, actually...
        workspace = $("<div/>").attr('id', id);


    // attach the workspace
    element.append(workspace);

    // the magic blockly thing... at least it's not using the iframe stuff
    Blockly.inject(workspace[0], {path: '/static/jsplugins/blockly/'});

    console.log(cell.metadata.blockly);
    if(cell.metadata.blockly === undefined){
        cell.metadata.blockly = {xml: "<xml></xml>"};
    }
    console.log(cell.metadata.blockly);

    Blockly.Xml.domToWorkspace(Blockly.mainWorkspace,
        Blockly.Xml.textToDom(cell.metadata.blockly.xml)
    );
    

    // every time you move a block, update the generated code in the
    // output_cell
    Blockly.bindEvent_(
        Blockly.mainWorkspace.getCanvas(),
        'blocklyWorkspaceChange',
        null,
        on_workspace_change(cell));
}

function get_cell_from_target(element){
    // need the cell DOM element first... not sure if i can trust
    // get_selected_cell...
    var cell_element = element.parentsUntil("#notebook").last(),
        // might not need this.. and might keep gc open?
        cells = IPython.notebook.get_cells(),
        // get the idx of the IPython.Cell
        cell_idx = +cells.map(function(c,i){return i;})
            .filter(function(idx){
                // i hate jquery sometimes
                return cells[idx].element.is(cell_element);
            })[0],
        // and the actual cell
        cell = cells[cell_idx];

    return cell;
}

function get_output_cell(cell){
    // need the cell DOM element first... not sure if i can trust
    var cells = IPython.notebook.get_cells(),
        // get the idx of the IPython.Cell
        cell_idx = +cells.map(function(c,i){return i;})
            .filter(function(idx){
                return cells[idx] === cell;
            })[0],
        // where to put the generated code, for now
        output_cell;



    // gotta put this code someplace...
    if(cell.at_bottom() ||                              // but not off the end
        !(cells[cell_idx+1] instanceof IPython.CodeCell) ||   // but only code
        cells[cell_idx+1].get_text()        // and only if it belongs to blkly
            .slice(0, BLOCKLY_DELIM.length) !== BLOCKLY_DELIM
    ){
        output_cell = IPython.notebook.insert_cell_below("code", cell_idx);
    }else{
        // otherwise it's the next one.
        output_cell = cells[cell_idx+1];
    }

    return output_cell;
}

function on_workspace_change(cell){
    /*
        probably would get some events... should check it out...
        ideally, it gets the actual workspace what changed (if multiple)
    */
    return function(){
        // getting the output every time, as we have no idea what will
        // happen as people start dinking with stuff
        
        var output_cell = get_output_cell(cell);


        if(cell.metadata.blockly === undefined){
           cell.metadata.blockly = {}; 
        }
        
        var xml = Blockly.Xml.domToText(
            Blockly.Xml.workspaceToDom(
                Blockly.mainWorkspace));
        
        cell.metadata.blockly.xml = xml;
        
        output_cell.set_text(
            BLOCKLY_DELIM +
            Blockly.Generator.workspaceToCode('Python')
        );
    };
}

IPython.json_handlers.register_handler('blockly', blockly_handler);

function load_sample_data(){
    /*
        sample stuff.. destroy ASAP.
    */
    Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, $(
        '<xml id="startBlocks" style="display: none">' +
        '    <block type="controls_if" inline="false" x="-100" y="50">' +
        '      <value name="IF0">' +
        '        <block type="logic_compare" inline="true">' +
        '          <title name="OP">LT</title>' +
        '          <value name="A">' +
        '            <block type="variables_get">' +
        '              <title name="VAR">item</title>' +
        '            </block>' +
        '          </value>' +
        '          <value name="B">' +
        '            <block type="math_number">' +
        '              <title name="NUM">256</title>' +
        '            </block>' +
        '          </value>' +
        '        </block>' +
        '      </value>' +
        '      <statement name="DO0">' +
        '        <block type="variables_set" inline="false">' +
        '          <title name="VAR">item</title>' +
        '          <value name="VALUE">' +
        '            <block type="math_number">' +
        '              <title name="NUM">0</title>' +
        '            </block>' +
        '          </value>' +
        '          <next>' +
        '            <block type="text_print" inline="false">' +
        '              <value name="TEXT">' +
        '                <block type="text">' +
        '                  <title name="TEXT">Game Over</title>' +
        '                </block>' +
        '              </value>' +
        '            </block>' +
        '          </next>' +
        '        </block>' +
        '      </statement>' +
        '    </block>' +
        '  </xml>'
    )[0]);
}
}).call(this, IPython, $, this.Blockly || null);